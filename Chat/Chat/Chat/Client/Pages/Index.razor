@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Shared.Models
@using Newtonsoft.Json
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime
@inject HttpClient Http
<PageTitle>Chat</PageTitle>
<h3>SignalR Chat</h3>

@if (!isUserLogin)
{
    <div class="input-group">
        <input @bind="user.Name" class="form-control" @onkeyup="HandleConnection" placeholder="Enter your name"/>
        <button class="btn btn-primary form-control-append" 
                @onclick="ChooseUser">Login</button>
    </div>
}
else if (!isChatChosen)
{
    <div class="row justify-content-center">
        <div class="col-auto">
            <div class="table">
                <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Connect</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var u in users)
                {
                    @if (u.Id == user.Id)
                    {
                        continue;
                    }
                    <tr>
                        <th scope="row">@u.Id</th>
                        <th>@u.Name</th>
                        <th>
                            <button class="btn btn-primary" @onclick="() => Connect(u)">Connect</button>
                        </th>
                    </tr>
                }
                </tbody>
            </div>
            </div>
    </div>
}
else
{
    <textarea style="width:100%; height: 500px;" @ref="TextAreaRef" disabled="disabled">
    @foreach (var m in messages)
    {
        @(m.Content + "\n");
    }
</textarea>
    <div class="input-group">
        <input @bind="message"
               @onkeyup="HandleInput"
               class="form-control"/>
        <button class="btn btn-primary form-group-append"
                @onclick="Send"
                disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}

@code{
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private Chat chat = new Chat();
    private User user = new User();
    private List<User> users = new();
    private string message = String.Empty;
    ElementReference TextAreaRef;

    private async Task Connect(User u)
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/privatechathub?username={user.Name}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var actualMessage = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            var msg = new Message() {Content = actualMessage, User = this.user, Chat = chat, DateCreated = DateTime.Now};
            messages.Add(msg);
            // var myContent = JsonConvert.SerializeObject(msg);
            // var buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
            // var byteContent = new ByteArrayContent(buffer);
            // byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            Http.PostAsJsonAsync("api/message", new MessageDTO(){Content = msg.Content, Chat = msg.Chat.ChatName, User = msg.User.Name});
            _jsRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        
        await hubConnection.StartAsync();
        isChatChosen = true;
        chat.ChatName = $"{user.Name}And{u.Name}";
        await ChooseChat(u);
    }

     private async Task ChooseChat(User u)
     {
         var chats = await Http.GetFromJsonAsync<List<Chat>>("api/chats");
         if (chats.Any(ch => ch.ChatName == chat.ChatName))
         {
             return;
         }
         await Http.PostAsJsonAsync("api/chats", new ChatDTO() {ChatName = chat.ChatName, FirstUserName = user.Name, SecondUserName = u.Name});
     }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessage", user.Name, message);
            message = String.Empty;
        }
    }
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private bool isUserLogin = false;
    private bool isChatChosen = false;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<User>>($"api/user");
    }

    private void ChooseUser()
    {
        user = users.FirstOrDefault(u => u.Name == user.Name);
        isUserLogin = true;
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
    private void HandleConnection(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            ChooseUser();
        }
    }

}