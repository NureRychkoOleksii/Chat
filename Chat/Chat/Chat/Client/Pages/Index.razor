@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Shared.Models
@using UserDTO = Chat.Shared.Models.UserAndChatDTOS.UserDTO
@using ChatDTO = Chat.Shared.Models.UserAndChatDTOS.ChatDTO
@using MessageDTO = Chat.Shared.Models.UserAndChatDTOS.MessageDTO
@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime
@inject HttpClient Http

<PageTitle>Chat</PageTitle>
<h3>SignalR Chat</h3>
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input @bind="messageToChange" class="form-control" placeholder="Enter message"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => Close(true)">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>

@if (!isUserLogin)
{
    <div class="input-group">
        <input @bind="user.Name" class="form-control" @onkeyup="HandleConnection" placeholder="Enter your name"/>
        <button class="btn btn-primary form-control-append" 
                @onclick="ChooseUser">Login</button>
    </div>
}
else if (!isChatChosen)
{
    <div class="row justify-content-center">
        <div class="col-auto">
            <div class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Connect</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var u in users)
                    {
                        @if (u.Id == user.Id)
                        {
                            continue;
                        }
                        
                        <tr>
                            <th scope="row">@u.Id</th>
                            <th>@u.Name</th>
                            <th>
                                <button class="btn btn-primary" @onclick="() => Connect(u)">Connect</button>
                            </th>
                        </tr>
                    }
                @foreach (var ch in chats)
                {
                    if (!ch.IsPrivate)
                    {
                        <tr>
                            <th scope="row">@ch.Id</th>
                            <th>@ch.ChatName</th>
                            <th>
                                <button 
                                    class="btn btn-primary" 
                                    @onclick="() => { 
                                    chat.ChatName = ch.ChatName;
                                    Connect(isChatPrivate: false); }">Connect</button>
                            </th>
                        </tr>
                    }
                }
                </tbody>
            </div>
            </div>
    </div>
}
else
{
    <div style="width:100%;" @ref="TextAreaRef" disabled="disabled">
        <div class="text-lg-start" @onmouseover="() => showChange=true" @onmouseout="() => showChange=false">
            @foreach (var m in messages)
            {
                <div class="d-flex justify-content-between">
                    <p>@(m.Content)</p>
                    <div class="d-flex justify-content-between gap-2">
                        <p class = "@(showChange ? "visible" : "invisible")"
                           @onclick="() => { Open(); changingMessage=m.Content;}">Change</p>
                        <p class = "@(showChange ? "visible" : "invisible")">Delete</p>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="input-group">
        <input @bind="message"
               @onkeyup="HandleInput"
               class="form-control"/>
        <button class="btn btn-primary form-group-append"
                @onclick="Send"
                disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}

@code{
    private HubConnection? hubConnection;
    private List<MessageDTO> messages = new ();
    private ChatDTO chat = new ();
    private UserDTO user = new ();
    private List<ChatDTO> chats = new();
    private List<UserDTO> users = new();
    private string message = String.Empty;
    private bool showChange = false;
    private bool showModal = false;
    private string messageToChange = String.Empty;
    private string changingMessage = String.Empty;
    private bool isChanged = false;
    ElementReference TextAreaRef;

    private async Task Connect(UserDTO u = null, bool isChatPrivate = true)
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/privatechathub?username={user.Name}"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
            {
                var actualMessage = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
                var msg = new MessageDTO()
                {Content = actualMessage, User = this.user, Chat = chat, DateCreated = DateTime.Now};
                messages.Add(msg);
                StateHasChanged();
                await Http.PostAsJsonAsync("api/message", new MessageTOApiDTO()
                {Content = msg.Content, Chat = msg.Chat.ChatName, User = msg.User.Name});
                await _jsRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            });

        if (isChatPrivate)
        {
            chat.ChatName = $"{user.Name}And{u.Name}";
            await ChooseChat(u);
        }
        
        else
        {
            await AddUserToChat(chat.ChatName);
        }
        
        isChatChosen = true;
        await hubConnection.StartAsync();
        
    }

     private async Task ChooseChat(UserDTO u)
     {
         if (chats.Any(ch => ch.ChatName == chat.ChatName))
         {
             return;
         }

         await Http.PostAsJsonAsync("api/chats",
             new ChatToApiDTO() {ChatName = chat.ChatName, FirstUserName = user.Name, SecondUserName = u.Name});
     }

    private async Task AddUserToChat(string chatName)
    {
        chat = chats.FirstOrDefault(ch => ch.ChatName == chatName);
        if (chat.UsersId.Contains(user.Id))
        {
            return;
        }

        await Http.PutAsJsonAsync("api/chats/addUser",new ChatToUpdateDTO()
        {ChatName = chat.ChatName, userToUpdate = user.Id});
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
           await hubConnection.SendAsync("AddMessage", user.Name, message);
            message = String.Empty;
        }
    }
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private bool isUserLogin = false;
    private bool isChatChosen = false;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<UserDTO>>("api/user");
        chats = await Http.GetFromJsonAsync<List<ChatDTO>>("api/chats");
    }

    private void ChooseUser()
    {
        user = users.FirstOrDefault(u => u.Name == user.Name);
        isUserLogin = true;
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
    private void HandleConnection(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            ChooseUser();
        }
    }

    private void ChangeMessage(string msg)
    {
        foreach (var m in messages)
        {
            if (m.Content == msg)
            {
                m.Content = messageToChange;
            }
        }
    }

    private void Save(string msg = "")
    {
        if (msg is not null)
        {
            ChangeMessage(msg);
        }
    }
    
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close(bool change = false)
    {
        if (change)
        {
            Save(changingMessage); 
        }
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

}